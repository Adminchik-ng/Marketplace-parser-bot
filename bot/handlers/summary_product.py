from datetime import datetime, timedelta
from math import log
from aiogram import Router, types
from aiogram.filters import Command

from database import db

import logging

logger = logging.getLogger(__name__)

summary_router = Router()
MAX_MSG_LENGTH = 4096


async def send_long_message(message_obj: types.Message, text: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–∞—Å—Ç—è–º–∏ –ø–æ –ª–∏–º–∏—Ç—É Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤),
    —Ä–∞–∑–±–∏–≤–∞—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å —Å–ª–æ–≤–∞.
    """
    while text:
        part = text[:MAX_MSG_LENGTH]

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É \n, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞
        cut_pos = part.rfind("\n")
        if cut_pos != -1 and len(text) > MAX_MSG_LENGTH:
            part = part[:cut_pos]

        await message_obj.answer(part, parse_mode="Markdown")
        text = text[len(part):]


@summary_router.message(Command(commands=["summary"]))
async def cmd_summary(message: types.Message, conn):
    user_id = message.from_user.id

    try:
        products = await db.products.get_user_products_with_details(
            conn, user_id=user_id
        )
    except Exception:
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        logger.error("Failed to get user products with details.", exc_info=True) 
        return

    if not products:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    today_str = datetime.now().strftime("%d.%m.%Y")
    lines = [f"üìä –û—Ç—á–µ—Ç –∑–∞ {today_str}:\n"]

    for idx, item in enumerate(products, start=1):
        (
            product_id,
            product_name,
            product_url,
            target_price,
            current_price,
            min_price,
            marketplace,
            last_error,
            last_checked,
        ) = item

        if isinstance(last_checked, datetime):
            last_checked_moscow = last_checked + timedelta(hours=3)
            last_checked_str = last_checked_moscow.strftime("%d.%m.%Y %H:%M")
        else:
            last_checked_str = str(last_checked) if last_checked else None

        if last_error:
            lines.append(
                f"{idx}. ‚ùå[{marketplace.title()}]‚ùå\n"
                f"‚ö†Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {last_error}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked_str}\n"
                f"üîó –°—Å—ã–ª–∫–∞: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product_url})\n"
                f"‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            )
            continue

        if current_price is not None:
            if current_price <= target_price:
                status_line = "‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!\n"
                diff_line = "\n"
            else:
                diff = current_price - target_price
                status_line = ""
                diff_line = f"\nüîª –î–æ —Ü–µ–ª–∏: {diff} ‚ÇΩ\n"

            lines.append(
                f"{idx}. [{marketplace.title()}]\n"
                f"{status_line}"
                f"üÜî –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name}\n"
                f"üîó –°—Å—ã–ª–∫–∞: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product_url})\n"
                f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è: {current_price} ‚ÇΩ"
                f"{diff_line}"
                f"üìâ –ú–∏–Ω–∏–º—É–º: {min_price} ‚ÇΩ\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked_str}\n"
            )
        else:
            lines.append(
                f"{idx}. [{marketplace.title()}]\n"
                f"‚åõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –ø–æ–ª—É—á–µ–Ω–∏–µ–º!\n"
                f"üîó –°—Å—ã–ª–∫–∞: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product_url})\n"
                f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n"
            )

    report = "\n".join(line for line in lines if line.strip())

    await send_long_message(message, report)
