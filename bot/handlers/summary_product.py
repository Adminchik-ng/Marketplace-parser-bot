from datetime import datetime
from typing import Optional

from aiogram import Router, types
from aiogram.filters import Command
from asyncpg import Connection
from datetime import timedelta

from database import db


summary_router = Router()


@summary_router.message(Command(commands=["summary"]))
async def cmd_summary(message: types.Message, conn):
    user_id = message.from_user.id

    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å last_checked –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        products = await db.products.get_user_active_products_with_prices_and_errors(
            conn, user_id=user_id
        )
    except Exception:
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    if not products:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    today_str = datetime.now().strftime("%d.%m.%Y")
    lines = [f"üìä –û—Ç—á–µ—Ç –∑–∞ {today_str}:\n"]

    for idx, item in enumerate(products, start=1):
        (
            product_id,
            product_name,
            product_url,
            target_price,
            current_price,
            min_price,
            marketplace,
            last_error,
            last_checked,  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø–æ–ª–µ –≤ –≤–∞—à SQL-–∑–∞–ø—Ä–æ—Å
        ) = item
        if isinstance(last_checked, datetime):
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º last_checked –≤ –ú–æ—Å–∫–≤—É
            last_checked_moscow = last_checked + timedelta(hours=3)
            last_checked_str = last_checked_moscow.strftime("%d.%m.%Y %H:%M")
        else:
            last_checked_str = str(last_checked) if last_checked else "–µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏üòî"

        if last_error:
            
            lines.append(
                f"{idx}. ‚ùå[{marketplace}]‚ùå\n"
                f"‚ö†Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: "
                f"{last_error}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked_str}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {product_url}\n"
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            )
            continue

        product_name_display = product_name or "–ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–¥–∏–ª–∏üòî"

        if current_price is not None:
            if current_price <= target_price:
                status_line = "‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
                diff_line = "\n"
            else:
                diff = current_price - target_price
                status_line = ""
                diff_line = f"\n‚ùå –î–æ —Ü–µ–ª–∏: {diff} ‚ÇΩ ({target_price} ‚ÇΩ)\n"

            lines.append(
                f"{idx}. [{marketplace}]\n"
                f"üÜî –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name_display}\n"
                 f"üîó –°—Å—ã–ª–∫–∞: {product_url}\n"
                f"{status_line}"
                f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è: {current_price} ‚ÇΩ | üìâ –ú–∏–Ω–∏–º—É–º: {min_price} ‚ÇΩ"
                f"{diff_line}"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked_str}\n"
            )
        else:
            lines.append(
                f"{idx}. [{marketplace}]\n"
                f"üÜî –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name_display}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {product_url}\n"
                f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                f"üîó –°—Å—ã–ª–∫–∞: {product_url}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked_str}\n"
            )

    report = "\n".join(line for line in lines if line.strip())

    await message.answer(report)