from aiogram import Router, types
from aiogram.filters import Command
from asyncpg import Connection
from database import db

list_router = Router()
MAX_MSG_LENGTH = 4096


async def send_long_message(message_obj: types.Message, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ –ø–æ –ª–∏–º–∏—Ç—É Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤),
    —Ä–∞–∑–±–∏–≤–∞—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏.
    """
    while text:
        part = text[:MAX_MSG_LENGTH]
        cut_pos = part.rfind("\n")
        if cut_pos != -1 and len(text) > MAX_MSG_LENGTH:
            part = part[:cut_pos]

        await message_obj.answer(part, parse_mode="Markdown")
        text = text[len(part):]


@list_router.message(Command(commands=["list"]))
async def cmd_list_products(message: types.Message, conn: Connection):
    user_id = message.from_user.id

    try:
        products = await db.products.get_user_active_products(conn, user_id=user_id)
    except Exception:
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ãüòû.")
        return

    if not products:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    lines = [f"üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã ({len(products)}):"]
    for idx, product in enumerate(products, start=1):
        # product ‚Äî –∫–æ—Ä—Ç–µ–∂: (product_id, product_name, product_url, target_price, marketplace)
        product_name = product[1]
        product_url = product[2]
        target_price = product[3]
        marketplace = product[4]

        if product_name:
            lines.append(
                f"{idx}. [{marketplace.title()}]\n"
                f"üÜî –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name}\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product_url})\n"
                f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ"
            )
        else:
            lines.append(
                f"{idx}. [{marketplace.title()}]\n"
                f"‚åõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –ø–æ–ª—É—á–µ–Ω–∏–µ–º!\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product_url})\n"
                f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ"
            )

    inactive_products = await db.products.get_user_inactive_products(conn, user_id=user_id)

    if inactive_products:
        lines.append(f"‚õî –ù–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(inactive_products)}):")
        for idx, inactive_product in enumerate(inactive_products, start=1):
            product_name = inactive_product[1]
            product_url = inactive_product[2]
            target_price = inactive_product[3]
            marketplace = inactive_product[4]

            lines.append(
                f"{idx}. [{marketplace.title()}]\n"
                f"‚ùå –î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product_url})\n"
                f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ"
            )

    report = "\n\n".join(lines)

    await send_long_message(message, report)
