import re
import logging
from contextlib import suppress
from typing import Optional

from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from asyncpg import Connection

from database import db  # –í–∞—à –º–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ë–î
from ..states.states import AddProductStates
from ..keyboards.keyboards import marketplace_keyboard

logger = logging.getLogger(__name__)
add_product_router = Router()


VALID_MARKETPLACES = {"wildberries", "ozon", "yandex", "joom"}

URL_REGEX = re.compile(
    r'^https?://(?:www\.)?'
    r'('
    r'wildberries\.ru|'           # Wildberries
    r'ozon\.ru|'                 # Ozon
    r'((?:[\w-]+\.)*yandex\.ru)|' # yandex.ru —Å –ª—é–±—ã–º–∏ –ø–æ–¥–¥–æ–º–µ–Ω–∞–º–∏
    r'yandex\.market|'           # –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
    r'joom\.(com|ru)'
    r')'
    r'[/\w\-\._~:/?#\[\]@!$&\'()*+,;=%]*$', # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å URL
    re.IGNORECASE
)



def is_valid_url(url: str) -> bool:
    return bool(URL_REGEX.match(url))


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
@add_product_router.message(Command(commands=["add"]))
async def cmd_add_start(message: types.Message, state: FSMContext, *, conn: Connection):
    user_id = message.from_user.id
    
    result = await db.join_query.get_user_role_and_active_products_count(conn=conn, user_id=user_id)

    if result is None:
        await message.answer("‚ö†Ô∏è –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ. üôá‚Äç‚ôÇÔ∏è")
        await state.clear()
        return

    role, current_count = result
    is_admin = (role == "admin") 

    if not is_admin and current_count >= 5:
        await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º ‚Äî 5 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ, –Ω–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º! üôè‚ú®")
        await state.clear() 
        return
    
    msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
        reply_markup=marketplace_keyboard()
    )

    await state.update_data(marketplace_msg_id=msg.message_id)
    await state.set_state(AddProductStates.marketplace)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
@add_product_router.callback_query(
    lambda c: c.data in [
        "marketplace_wildberries",
        "marketplace_ozon",
        "marketplace_yandex",
        "marketplace_joom",
        "cancel"
    ]
)
async def marketplace_chosen(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "cancel":
        await state.clear()
        with suppress(TelegramBadRequest):
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
            await callback.message.delete()
        await callback.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    marketplace = callback.data.split("_", 1)[1]
    await state.update_data(marketplace=marketplace)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
    )
    await state.set_state(AddProductStates.product_url)


# –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –Ω–µ /add –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ marketplace
@add_product_router.message(
    StateFilter(AddProductStates.marketplace),
    ~Command(commands=["add"])
)
async def resend_marketplace_buttons(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("marketplace_msg_id"):
        with suppress(TelegramBadRequest):
            await message.bot.delete_message(chat_id=message.from_user.id, message_id=msg_id)

    msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
        reply_markup=marketplace_keyboard(),
    )
    await state.update_data(marketplace_msg_id=msg.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
@add_product_router.message(AddProductStates.product_url)
async def product_url_entered(message: types.Message, state: FSMContext):
    if message.text.lower() == "/cancel":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer(
            "‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
        )
        return

    await state.update_data(product_url=url)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
    )
    await state.set_state(AddProductStates.target_price)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î
@add_product_router.message(AddProductStates.target_price)
async def target_price_entered(
    message: types.Message,
    state: FSMContext,
    conn: Connection,         # asyncpg.Connection (middleware –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å)
    user_row: Optional[object] = None,
):
    if message.text.lower() == "/cancel":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    price_text = message.text.strip()

    if not price_text.isdigit():
        await message.answer(
            "‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5990) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    target_price = int(price_text)
    if target_price <= 0:
        await message.answer(
            "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    data = await state.get_data()
    marketplace = data.get("marketplace")
    product_url = data.get("product_url")

    if not marketplace or not product_url:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /add –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if user_row is None:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ user_row (–æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ dict)
    user_id = getattr(user_row, "telegram_id", None) or user_row.get("telegram_id", None)
    if user_id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    try:
        await db.products.add_product(
            conn=conn,
            user_id=user_id,
            marketplace=marketplace,
            product_url=product_url,
            target_price=target_price
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
        f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace.title()}\n"
        f"–°—Å—ã–ª–∫–∞: {product_url}\n"
        f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ"
    )
    await state.clear()
